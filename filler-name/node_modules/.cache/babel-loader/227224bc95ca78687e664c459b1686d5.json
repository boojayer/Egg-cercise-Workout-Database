{"ast":null,"code":"var _jsxFileName = \"/home/stephen/Desktop/CS-97-Project/filler-name/src/components/Calendar.js\";\nimport React from 'react';\nimport FullCalendar, { formatDate } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { createEventId } from './event-utils';\nimport { API, createHeader } from '../constants';\nimport './Calendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateSelect = async selectInfo => {\n      let title = prompt('Please enter a new title for your event');\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n\n      if (title) {\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start: selectInfo.startStr,\n          end: selectInfo.endStr,\n          allDay: selectInfo.allDay\n        });\n        const token = window.localStorage.getItem('jwt');\n        await API.post('/events', {\n          id: createEventId(),\n          title: title,\n          start: selectInfo.startStr\n        }, createHeader(token));\n      }\n    };\n\n    this.handleEventClick = clickInfo => {\n      if (window.confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        clickInfo.event.remove();\n      }\n    };\n\n    this.handleEvents = events => {\n      this.setState({\n        currentEvents: events\n      });\n    };\n\n    this.state = {\n      weekendsVisible: true,\n      events: []\n    };\n  }\n\n  componentDidMount() {\n    API.get('/@me/events', createHeader(this.props.token)).then(response => {\n      this.setState({\n        events: response.data\n      });\n    }).catch(error => console.error(error));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"demo-app\",\n      children: [this.renderSidebar(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"demo-app-main\",\n        children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n          plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n          headerToolbar: {\n            left: 'prev,next today',\n            center: 'title',\n            right: 'dayGridMonth,timeGridWeek,timeGridDay'\n          },\n          initialView: \"dayGridMonth\",\n          editable: true,\n          selectable: true,\n          selectMirror: true,\n          dayMaxEvents: true,\n          events: this.state.events // alternatively, use the `events` setting to fetch from a feed\n          ,\n          select: this.handleDateSelect,\n          eventContent: renderEventContent // custom render function\n          ,\n          eventClick: this.handleEventClick,\n          eventsSet: this.handleEvents // called after events are initialized/added/changed/removed\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n  renderSidebar() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"demo-app-sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"demo-app-sidebar-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Select dates and you will be prompted to create a new event\", /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Drag, drop, and resize events \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), \"Click an event to delete it\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"demo-app-sidebar-section\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction renderEventContent(eventInfo) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: eventInfo.timeText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      children: eventInfo.event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["/home/stephen/Desktop/CS-97-Project/filler-name/src/components/Calendar.js"],"names":["React","FullCalendar","formatDate","dayGridPlugin","timeGridPlugin","interactionPlugin","createEventId","API","createHeader","Calendar","Component","constructor","props","handleDateSelect","selectInfo","title","prompt","calendarApi","view","calendar","unselect","addEvent","id","start","startStr","end","endStr","allDay","token","window","localStorage","getItem","post","handleEventClick","clickInfo","confirm","event","remove","handleEvents","events","setState","currentEvents","state","weekendsVisible","componentDidMount","get","then","response","data","catch","error","console","render","renderSidebar","left","center","right","renderEventContent","eventInfo","timeText"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport FullCalendar, { formatDate } from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\nimport {\r\n  createEventId\r\n} from './event-utils'\r\nimport {\r\n  API,\r\n  createHeader\r\n} from '../constants';\r\nimport './Calendar.css'\r\n\r\nexport default class Calendar extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      weekendsVisible: true,\r\n      events: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    API.get('/@me/events', createHeader(this.props.token))\r\n      .then(response => {\r\n        this.setState({\r\n          events: response.data\r\n        })\r\n      })\r\n      .catch(error => console.error(error));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='demo-app'>\r\n        {this.renderSidebar()}\r\n        <div className='demo-app-main'>\r\n          <FullCalendar\r\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n            headerToolbar={{\r\n              left: 'prev,next today',\r\n              center: 'title',\r\n              right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n            }}\r\n            initialView='dayGridMonth'\r\n            editable={true}\r\n            selectable={true}\r\n            selectMirror={true}\r\n            dayMaxEvents={true}\r\n            events={this.state.events} // alternatively, use the `events` setting to fetch from a feed\r\n            select={this.handleDateSelect}\r\n            eventContent={renderEventContent} // custom render function\r\n            eventClick={this.handleEventClick}\r\n            eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderSidebar() {\r\n    return (\r\n      <div className='demo-app-sidebar'>\r\n        <div className='demo-app-sidebar-section'>\r\n          <h4>Instructions</h4>\r\n          <div>\r\n            Select dates and you will be prompted to create a new event\r\n            <div>Drag, drop, and resize events </div>\r\n            Click an event to delete it\r\n          </div>\r\n        </div>\r\n        <div className='demo-app-sidebar-section'>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  handleDateSelect = async (selectInfo) => {\r\n    let title = prompt('Please enter a new title for your event')\r\n    let calendarApi = selectInfo.view.calendar\r\n\r\n    calendarApi.unselect() // clear date selection\r\n\r\n    if (title) {\r\n      calendarApi.addEvent({\r\n        id: createEventId(),\r\n        title,\r\n        start: selectInfo.startStr,\r\n        end: selectInfo.endStr,\r\n        allDay: selectInfo.allDay\r\n      });\r\n      const token = window.localStorage.getItem('jwt');\r\n      await API.post('/events', {\r\n        id: createEventId(),\r\n        title: title,\r\n        start: selectInfo.startStr,\r\n      }, createHeader(token));\r\n    }\r\n  }\r\n\r\n  handleEventClick = (clickInfo) => {\r\n    if (window.confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\r\n      clickInfo.event.remove()\r\n    }\r\n  }\r\n\r\n  handleEvents = (events) => {\r\n    this.setState({\r\n      currentEvents: events\r\n    })\r\n  }\r\n\r\n}\r\n\r\nfunction renderEventContent(eventInfo) {\r\n  return (\r\n    <>\r\n      <b>{eventInfo.timeText}</b>\r\n      <i>{eventInfo.event.title}</i>\r\n    </>\r\n  )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}